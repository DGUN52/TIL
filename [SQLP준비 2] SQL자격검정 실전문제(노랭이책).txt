- 데이터 모델링 유의점
  - 중복, 비유연성, 비일관성


- 발생시점에 따른 엔티티 분류
  - 기본/키엔티티 : 독립적으로 생성됨
  - 중심엔티티 : 기본 엔티티와 행위 엔티티를 연결
  - 행위엔티티 : 이벤트나 트랜잭션에 의해 생성됨


- 데이터베이스 스키마 구조 3단계
  - 외부 스키마, 개념 스키마(통합적 관점), 내부 스키마


- 엔티티는 두 개 이상의 인스턴스를 가져야함
- 엔티티는 최소 한 개 이상의 관계가 있어야함

> 2025 02 24




- 엔티티의 이름은 전체 데이터 모델에서 고유해야한다.


- 엔티티에서 관계를 도출 할 때 업무기술서, 장표에 관계연결을 가능하게 하는 **동사**가 있어야한다.


- 식별자의 종류
  - 대표성 여부 → 주식별자/보조식별자
  - 스스로 생성됐는지 → 내부/외부식별자
  - 단일 속성으로 식별여부 → 단일/복합식별자
  - 오리지날인지 대체됐는지 → 본질/인조식별자

> 2025 02 25




- 비절차적 데이터 조작어 : SQL. (절차적 데이터 조작어 : c, java ...)


- 컬럼명 변경 문법 (ANSI 표준)
  - `rename stadium to stadium_jsv;`


- FK 제약 문법
  - on delete
    - cascade
    - set null
    - set default
    - restrict
    - no action
  - on insert
    - automatic : PK 없을 시 자동생성
    - set null
    - set default
    - Dependant : PK가 있을 때만 입력 가능
    - no action
  
  
  - drop과 truncate는 DDL로 auto commit된다. (truncate는 일부 dml성격)
  
  
  - 격리성 단계
    - read uncommitted
      - dirty read 발생
      - non repeatable read 발생
      - phantom read(삽입 이상) 발생
    - read committed
      - dirty read 방지
    - repeatable read
      - non repeatable read까지 방지
    - serializable
      - phantom read까지 방지
      
> 2025 03 01




- 논리연산자의 우선순위
  - NOT > AND > OR


- NULL과 연산, 집계함수
  - NULL이 포함된 연산은 모두 NULL
    - ex) a+b+c → 셋 중 하나라도 null이면 결과는 null
  - NULL이 포함된 집계함수 → NULL인 로우는 무시됨
    - ex) avg()를 사용한 group by인 경우 평균의 모집단 수에서도 제외됨


- `IFNULL`(MySQL) = `ISNULL`(SQL-Server) = `NVL`(Oracle)
  - `NVL2(기준값, "NULL", "NOT NULL")`


- Cartesian 곱을 만들기 위한 명시적 join 방법은 `cross join`


- SQL Server의 EXCEPT 연산 = MINUS 연산

> 2025 03 02. ~100p



- GROUPING(col_a)
  - 해당 컬럼이 집계됐는지 확인하는 함수.
  - 집계된 컬럼이 NULL로 표시될 때 GROUPING(col_a)의 결과는 1
  ```sql
  -- 출처 https://gent.tistory.com/386
  SELECT job
      , deptno
      , SUM(sal) 
      , GROUPING(job)
      , GROUPING(deptno)
  FROM emp
  WHERE job IN ('ANALYST', 'MANAGER')
  GROUP BY ROLLUP(job, deptno)
  ```


- GROUPING_ID(col_a, col_b, ...)
  - 여러 컬럼이 집계됐는지에 대한 판단 가능
  - col_a, col_b가 함수에 사용되고, 집계돼었을 때 3 반환
  → 이진수처럼 계산하여 리턴


- ROLLUP(region, product) : 단계별 소계 생성
  1. group by (region, product) `상세`
  2. group by (region) `소계`
  3. group by () `합계`
  ```sql
  SELECT region, product, SUM(amount) AS total
  FROM sales
  GROUP BY ROLLUP(region, product);
  ```
  - ![](https://velog.velcdn.com/images/deaf52/post/edff8c04-de33-4134-ba43-8b87e639125c/image.png)


- CUBE(region, product) : 가능한 모든 조합 생성
  1. group by (region, product)
  2. group by (region)
  3. group by (product)
  4. group by ()
  ```sql
  SELECT region, product, SUM(amount) AS total
  FROM sales
  GROUP BY CUBE(region, product);
  ```
  - ![](https://velog.velcdn.com/images/deaf52/post/c3e0ebbb-f9b3-4bd3-a53f-3fc410dba096/image.png)


- GROUPING_SETS( (region, product), (region), (product), () )
: 지정한대로 조합 수행
  - 위와 같이 수행하면 cube(region, product)와 동일


- PL/SQL에서 동적SQL / DDL을 수행할 때 `EXECUTE IMMEDIATE`를 사용하지 않으면 rollback이 가능함
```sql
-- 예시
TRUNCATE TABLE DEPT; -- 롤백 가능
EXECUTE IMMEDIATE TRUNACTE TABLE DEPT; -- 롤백 불가. 바로 실행
```


- clustered index : 물리적으로 모여서 정렬된 인덱스


- anti join : 일반적인 조인과 달리 차집합에 대해 결과를 반환하는 방식 (주로 not in 절에 등장)


- exists 절은 주로 semi join으로 실행계획에 나타난다.



- log force at commit
  - 커밋 시점에는 반드시 로깅돼있어야함
- fast commit 
  - 디스크에 아직 기록되지 않고 버퍼 블록에만 기록된 상태로 Redo로그를 믿고 빠르게 커밋을 완료하는 기법
- delayed block cleanout
  - 오라클에서 변경된 블록이 커밋 때 clean out(락 해제, 정보 기록)되지 않고 다음 접근하는 세션이 clean out 하는 기법


- Buffer pinning
  - 블록이 2번 이상 Call 된 경우 버퍼블록을 메모리에 저장해두는 오라클 기법
  - 래치 획득, 해시체인 탐색등의 과정이 생략되어 빠른 접근 가능
  - 메모리IO는 발생


- Response time
= service time + wait time = CPU time + Queue time


- dynamic sql을 사용하면 애플리케이션 커서 캐싱이 작동하지 않는 경우가 있으므로 Static SQL을 지원하는 경우 그것을 쓰는 것이 바람직하다.


- `for update`를 SQL Server에서 대체하려면
  - from 고객 WITH (HOLDLOCK)
  - from 고객 WITH (UPDLOCK)
  - 그 외 키워드 : READPAST; 스킵, TABLOCK; 테이블 단위 락 설정


- `/*+ append */` 힌트로 insert를 수행하면 Exclusive Lock이 발생한다.


- `update`문의 TM Lock(테이블 락)은 Row-X모드; `SX`모드, 
→ 테이블에 같은 DML은 허용되나 DDL은 허용하지 않는 목적

- `update`문의 TX Lock(트랜잭션 락)은 행단위 Exclusive모드; `X`모드
→ 같은 행에 대한 DML 방지


> 2025 03 03. ~157p




- 데이터베이스 콜 : 실행계획 수립 요청, sql수행요청


- group by를 사용한 뷰는 Merging이 자주 발생


> 2025 03 04. ~165p





- 소트 관련 실행계획의 오퍼레이션
  - Sort Aggregate : order by가 아닌 전체 로우 집계 시 나타나는 실행계획
  - Sort Order by : order by
  - Sort Group by : group by
  - Sort Unique : distinct/union
  - Sort Join : 소트 머지 조인
  - Window Sort : 윈도우 함수